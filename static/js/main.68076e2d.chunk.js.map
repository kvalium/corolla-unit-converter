{"version":3,"sources":["utils.js","components/CategorySelector.jsx","components/Convertor.jsx","components/ConvertorContainer.jsx","index.js","components/App.jsx"],"names":["corolla","sellPace","passengers","mass","height","length","hp","volume","lengthsourceUnits","name","ratio","categories","label","units","convertUnitToCorolla","category","unit","value","find","_ref","_ref2","CategorySelector","onChange","react_default","a","createElement","className","class","e","target","style","display","width","map","key","Convertor","onSelectUnit","onChangeValue","corollas","selectedCategory","type","_ref3","parseFloat","toFixed","readOnly","marginLeft","ConvertorContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getUnit","getCorollas","val","arguments","undefined","state","currentVal","setState","prevProps","React","Component","rootElement","document","getElementById","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setCategory","Fragment","ConvertorContainer_ConvertorContainer"],"mappings":"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","file":"static/js/main.68076e2d.chunk.js","sourcesContent":["// 2018 Toyota Corolla facts.\nconst corolla = {\n  sellPace: 32, // TC sell pace is avg 27 to 37 seconds.\n  passengers: 5,\n  mass: 1288, // kilograms\n  height: 145.5, // centimeters\n  length: 465, // centimeters\n  hp: 132, // horsepower\n  volume: 369 // trunk volume (liters)\n};\n\n/**\n * Length units and their centimer divide ratio.\n */\nconst lengthsourceUnits = [\n  { name: \"meters\", ratio: 100 },\n  { name: \"centimeters\", ratio: 1 },\n  { name: \"milimeters\", ratio: 0.1 },\n  { name: \"kilometers\", ratio: 100000 },\n  { name: \"yards\", ratio: 91.44 },\n  { name: \"foots\", ratio: 30.48 },\n  { name: \"inches\", ratio: 2.54 },\n  { name: \"nautical miles\", ratio: 185200 }\n];\n\n// Unit categories, label and available units.\nexport const categories = [\n  {\n    name: \"length\",\n    label: \"a 2018 Toyota Corollas length is 465 centimeters.\",\n    units: lengthsourceUnits\n  },\n  {\n    name: \"height\",\n    label: \"a 2018 Toyota Corollas height is 145.5 centimeters.\",\n    units: lengthsourceUnits\n  },\n  {\n    name: \"mass\",\n    label: \"a 2018 Toyota Corollas weights 1,288 kilograms.\",\n    units: [\n      { name: \"kilograms\", ratio: 1 },\n      { name: \"tonnes\", ratio: 1000 },\n      { name: \"onces\", ratio: 35.274 }\n    ]\n  },\n  {\n    name: \"volume\",\n    label: \"Trunk volume of a 2019 Toyota Corolla is roughtly 369 liters\",\n    units: [{ name: \"litres\", ratio: 1 }, { name: \"gallons\", ratio: 3.785 }]\n  }\n];\n\n/**\n * For a given category and unit, returns the Corolla number for the corresponding\n * given value.\n *\n * @param {String} category the unit category (length, mass, volume, etc.)\n * @param {String} unit the selected unit for the corresponding category.\n * @param {Number} value the value to convert.\n */\nexport const convertUnitToCorolla = (category, unit, value) => {\n  const ratio = categories\n    .find(({ name }) => name === category)\n    .units.find(({ name }) => name === unit).ratio;\n  const corollas = (value * ratio) / corolla[category];\n  return corollas;\n};\n","import React from \"react\";\n\nimport { categories } from \"../utils\";\n\n/**\n * Category selector.\n *\n * @param {Function} onChange on selecting a new category\n */\nexport default function CategorySelector({ onChange }) {\n  return (\n    <div className=\"columns is-centered\">\n      <div className=\"column is-half\">\n        <div class=\"field\">\n          <div class=\"control\">\n            <div className=\"select is-large category-selector is-block\">\n              <select\n                onChange={e => onChange(e.target.value)}\n                style={{ display: \"block\", width: \"100%\" }}\n                className=\"is-capitalized\"\n              >\n                {categories &&\n                  categories.map(({ name }) => (\n                    <option key={name} value={name}>\n                      {name}\n                    </option>\n                  ))}\n              </select>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport { categories } from \"../utils\";\n\n/**\n * Convertor allows to select a unit, enter a value then displays the\n * corresponding number of Toyota Corollas.\n *\n * @param {String} category units category.\n * @param {Function} onSelectUnit on select a unit callback.\n * @param {Function} onChangeValue on entering a new value callback.\n * @param {Number} corollas corresponding to the value.\n */\nexport default function Convertor({\n  category,\n  onSelectUnit,\n  onChangeValue,\n  corollas\n}) {\n  const selectedCategory = categories.find(({ name }) => name === category);\n  return (\n    <div>\n      {selectedCategory && selectedCategory.label && (\n        <h3 className=\"subtitle is-5 has-text-centered\">\n          {selectedCategory.label}\n        </h3>\n      )}\n      <div className=\"columns is-mobile\">\n        <div className=\"column\">\n          <div className=\"columns is-gapless\">\n            <div className=\"column\">\n              <div class=\"field is-horizontal\">\n                <div class=\"control\">\n                  <input\n                    type=\"number\"\n                    className=\"input\"\n                    onChange={e => onChangeValue(e.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"column\">\n              <div class=\"field is-horizontal\">\n                <div class=\"control\">\n                  <div className=\"select\">\n                    <select\n                      onChange={e => onSelectUnit(e.target.value)}\n                      className=\"is-capitalized\"\n                    >\n                      {selectedCategory &&\n                        selectedCategory.units.map(({ name }) => (\n                          <option key={name} value={name}>\n                            {name}\n                          </option>\n                        ))}\n                    </select>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"column is-1\">\n          <div class=\"field is-horizontal\">\n            <div class=\"field-label is-normal\">\n              <label class=\"label has-text-centered\">=</label>\n            </div>\n          </div>\n        </div>\n        <div className=\"column\">\n          <div class=\"field is-horizontal\">\n            <div class=\"control\">\n              <input\n                type=\"text\"\n                className=\"input\"\n                value={parseFloat(corollas).toFixed(2)}\n                readOnly\n              />\n            </div>\n            <div class=\"field-label is-normal\">\n              <label class=\"label has-text-left\" style={{ marginLeft: 20 }}>\n                2018 Toyota Corollas\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Convertor from \"./Convertor\";\n\nimport { categories, convertUnitToCorolla } from \"../utils\";\n\n/**\n * ConvertorContainer embarks the logic of the Convertor component.\n */\nexport default class ConvertorContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      unit: this.getUnit(), // category unit\n      corollas: 0, // number of Corollas\n      currentVal: 0 // entered value.\n    };\n  }\n\n  /**\n   * Update the units and Corollas number when category changes.\n   *\n   * @param {Object} prevProps\n   */\n  componentDidUpdate(prevProps) {\n    if (prevProps.category !== this.props.category) {\n      const unit = this.getUnit();\n      const corollas = this.getCorollas(this.state.currentVal, unit);\n      this.setState({ unit, corollas });\n    }\n  }\n\n  /**\n   * Get first category unit name.\n   */\n  getUnit = () =>\n    categories.find(({ name }) => name === this.props.category).units[0].name;\n\n  /**\n   * Returns the number of Corollas corresponding to unit and value.\n   *\n   * @param {String} val entered value.\n   * @param {String} unit current unit.\n   */\n  getCorollas = (val, unit = undefined) =>\n    convertUnitToCorolla(\n      this.props.category,\n      unit ? unit : this.state.unit,\n      val\n    );\n\n  /**\n   * On select a new unit.\n   *\n   * @param {String} unit selected unit.\n   */\n  onSelectUnit = unit => {\n    const corollas = this.getCorollas(this.state.currentVal, unit);\n    this.setState({ unit, corollas });\n  };\n\n  /**\n   * On value update.\n   *\n   * @param {Number} val on updated value in the input.\n   */\n  onChangeValue = val => {\n    const corollas = this.getCorollas(val);\n    this.setState({ currentVal: val, corollas });\n  };\n\n  render() {\n    return (\n      <Convertor\n        category={this.props.category}\n        onSelectUnit={this.onSelectUnit}\n        corollas={this.state.corollas}\n        onChangeValue={this.onChangeValue}\n      />\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n","import React, { useState } from \"react\";\n\nimport { categories } from \"../utils\";\n\nimport CategorySelector from \"./CategorySelector\";\nimport ConvertorContainer from \"./ConvertorContainer\";\n\n/**\n * Homepage.\n */\nexport default function App() {\n  const [category, setCategory] = useState(categories[0].name);\n\n  return (\n    <>\n      <h1 className=\"title has-text-centered\">\n        Toyota Corolla unit converter!\n      </h1>\n      <CategorySelector onChange={setCategory} />\n      <ConvertorContainer category={category} />\n    </>\n  );\n}\n"],"sourceRoot":""}